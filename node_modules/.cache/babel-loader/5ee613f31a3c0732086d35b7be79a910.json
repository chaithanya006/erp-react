{"ast":null,"code":"var _jsxFileName = \"/Users/deva.kavuturi/chay/erp-react/src/components/products.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Products = () => {\n  _s();\n  const [products, setProducts] = useState([\n  // Add 100 entries of mock data\n  // You can generate more meaningful mock data based on your needs\n  // For simplicity, we are using generic data here\n  {\n    id: 1,\n    name: 'Product A',\n    category: 'Electronics',\n    price: 100,\n    stock: 50\n  }\n  // ... Repeat this structure for more entries\n  ]);\n  const handleAddProduct = () => {\n    const newProduct = {\n      id: products.length + 1,\n      name: `Product ${products.length + 1}`,\n      category: 'Miscellaneous',\n      price: Math.floor(Math.random() * 100) + 1,\n      // Random price between 1 and 100\n      stock: Math.floor(Math.random() * 50) + 1 // Random stock between 1 and 50\n    };\n    setProducts([...products, newProduct]);\n  };\n  const handleEditProduct = (productId, updatedProduct) => {\n    setProducts(prevProducts => prevProducts.map(product => product.id === productId ? {\n      ...product,\n      ...updatedProduct\n    } : product));\n  };\n  const handleDeleteProduct = productId => {\n    setProducts(prevProducts => prevProducts.filter(product => product.id !== productId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Products Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddProduct,\n      children: \"Add Product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), \" - Category: \", product.category, \" - Price: $\", product.price, \" - Stock: \", product.stock, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditProduct(product.id, {\n            price: product.price + 10\n          }),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteProduct(product.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, product.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Products, \"TT9opUzF3KDfl/m6+mKfruHUs4c=\");\n_c = Products;\nexport default Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Products","_s","products","setProducts","id","name","category","price","stock","handleAddProduct","newProduct","length","Math","floor","random","handleEditProduct","productId","updatedProduct","prevProducts","map","product","handleDeleteProduct","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/deva.kavuturi/chay/erp-react/src/components/products.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Products = () => {\n  const [products, setProducts] = useState([\n    // Add 100 entries of mock data\n    // You can generate more meaningful mock data based on your needs\n    // For simplicity, we are using generic data here\n    { id: 1, name: 'Product A', category: 'Electronics', price: 100, stock: 50 },\n    // ... Repeat this structure for more entries\n  ]);\n\n  const handleAddProduct = () => {\n    const newProduct = {\n      id: products.length + 1,\n      name: `Product ${products.length + 1}`,\n      category: 'Miscellaneous',\n      price: Math.floor(Math.random() * 100) + 1, // Random price between 1 and 100\n      stock: Math.floor(Math.random() * 50) + 1, // Random stock between 1 and 50\n    };\n\n    setProducts([...products, newProduct]);\n  };\n\n  const handleEditProduct = (productId, updatedProduct) => {\n    setProducts((prevProducts) =>\n      prevProducts.map((product) =>\n        product.id === productId ? { ...product, ...updatedProduct } : product\n      )\n    );\n  };\n\n  const handleDeleteProduct = (productId) => {\n    setProducts((prevProducts) => prevProducts.filter((product) => product.id !== productId));\n  };\n\n  return (\n    <div>\n      <h2>Products Management</h2>\n      <button onClick={handleAddProduct}>Add Product</button>\n      <ul>\n        {products.map((product) => (\n          <li key={product.id}>\n            <strong>{product.name}</strong> - Category: {product.category} - Price: ${product.price} - Stock: {product.stock}\n            <button onClick={() => handleEditProduct(product.id, { price: product.price + 10 })}>Edit</button>\n            <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Products;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}